# -*- coding: utf-8 -*-
"""2025-unab-programacion-avanzada-clase2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lUeUNUxOr9e3Kvtg6wvjhM2xiJwQOWRr
"""

# Clase 2 - Prog. Avanzada Cursada 2024
# Link a la lista de reproducción en Youtube
# https://www.youtube.com/playlist?list=PLKsU-SXwuInBxxwJyp-IF4U_1k2HucBcV

# Ejemplo del Automovil
class Automovil:
  ruedas = 4

  def __init__(self, color):
    self.color = color

  def set_color(self, color):
    self.color = color

  def get_color(self):
    return self.color.upper()

  def get_ruedas(self):
    return self.ruedas


# Instanciar la clase Automovil
automovil1 = Automovil('bordo')
automovil2 = Automovil('rojo')
automovil3 = Automovil('verde')


print(automovil1.get_color(), automovil2.get_color(),automovil3.get_color() )
print(automovil1.get_ruedas())
print(automovil2.get_ruedas())
print(automovil3.get_ruedas())

automovil3.set_color('azul')
print(automovil3.get_color())

# Vamos a trabajar con cuadrados y rectangulos
class Cuadrado():

  def __init__(self,lado):
    self.lado = lado

  def perimetro(self):
    return self.lado * 4

  def area(self):
    return self.lado * self.lado

# Instanciamos objetos de la clase Cuadrado
c1 = Cuadrado(2)
print('Cuadrado', c1.area(), c1.perimetro())


# Vamos a trabajar con cuadrados y rectangulos
class Rectangulo():

  def __init__(self,lado1, lado2):
    self.lado1 = lado1
    self.lado2 = lado2

  def perimetro(self):
    return self.lado1*2 + self.lado2*2

  def area(self):
    return self.lado1 * self.lado2

# Instanciamos objetos de la clase Rectangulo
r1 = Rectangulo(2, 3)
print('Rectangulo', r1.area(), r1.perimetro())

#NOTA: En esta implementación NO se aprovecha el uso de Herencia!!

class FiguraGeometrica():
  nombre = 'FG'
  pass

  def area(self):
    return self.lado1 * self.lado2

  def perimetro(self):
    return self.lado1*2 + self.lado2*2

class Cuadrado(FiguraGeometrica):

  def __init__(self,lado):
    self.lado1 = lado
    self.lado2 = lado


class Rectangulo(FiguraGeometrica):

  def __init__(self,lado1, lado2):
    self.lado1 = lado1
    self.lado2 = lado2

# Instanciamos objetos de la clase Cuadrado
c1 = Cuadrado(2)
print('Cuadrado', c1.area(), c1.perimetro(), c1.nombre)

# Instanciamos objetos de la clase Rectangulo
r1 = Rectangulo(2, 3)
print('Rectangulo', r1.area(), r1.perimetro(), r1.nombre)

# Nota: En este caso, si bien se utiliza HERENCIA, la definición del constructor de Cuadrado es discutible.
#       También es muy discutible implementación de los métodos area y perimetro en la clase FiguraGeometrica,
#       ya que NO todos los cálculos de áreas y perímetros pueden realizarse con esta implementación (por ejemplo,
#       no aplica para una eventual futura clase Circunsferencia)